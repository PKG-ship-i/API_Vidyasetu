// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Vidyasetu_API.Models;

public partial class VidyasetuAI_DevContext : DbContext
{
    public VidyasetuAI_DevContext(DbContextOptions<VidyasetuAI_DevContext> options)
        : base(options)
    {
    }

    public virtual DbSet<DeviceDetail> DeviceDetails { get; set; }

    public virtual DbSet<DeviceLogDetail> DeviceLogDetails { get; set; }

    public virtual DbSet<ParticipantAnswer> ParticipantAnswers { get; set; }

    public virtual DbSet<QuizParticipant> QuizParticipants { get; set; }

    public virtual DbSet<SharedQuizSession> SharedQuizSessions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserQuizeReponse> UserQuizeReponses { get; set; }

    public virtual DbSet<UserRequestPreference> UserRequestPreferences { get; set; }

    public virtual DbSet<UserRequestResponse> UserRequestResponses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DeviceDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__device_d__3213E83F8A8C5604");

            entity.ToTable("device_details");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(false)
                .HasColumnName("active_flag");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.DeviceIdentifier)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("device_identifier");
            entity.Property(e => e.DeviceOs)
                .HasMaxLength(100)
                .HasColumnName("device_os");
            entity.Property(e => e.DeviceToken)
                .IsRequired()
                .HasColumnName("device_token");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.DeviceDetails)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__device_de__user___3E52440B");
        });

        modelBuilder.Entity<DeviceLogDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__device_l__3213E83F03E0D94A");

            entity.ToTable("device_log_details");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(false)
                .HasColumnName("active_flag");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.DeviceId).HasColumnName("deviceId");
            entity.Property(e => e.RequestUrl)
                .HasMaxLength(200)
                .HasColumnName("request_url");
            entity.Property(e => e.SourceTypeId).HasColumnName("source_type_id");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.Device).WithMany(p => p.DeviceLogDetails)
                .HasForeignKey(d => d.DeviceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__device_lo__devic__440B1D61");
        });

        modelBuilder.Entity<ParticipantAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__particip__3213E83F2E9F230B");

            entity.ToTable("participant_answers");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(true)
                .HasColumnName("active_flag");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.IsCorrect).HasColumnName("is_correct");
            entity.Property(e => e.ParticipantId).HasColumnName("participant_id");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(50)
                .HasColumnName("question_id");
            entity.Property(e => e.SelectedOption)
                .HasMaxLength(200)
                .HasColumnName("selected_option");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
        });

        modelBuilder.Entity<QuizParticipant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__quiz_par__3213E83FD72BA9D5");

            entity.ToTable("quiz_participants");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(true)
                .HasColumnName("active_flag");
            entity.Property(e => e.CorrectCount).HasColumnName("correct_count");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(100)
                .HasColumnName("device_id");
            entity.Property(e => e.Nickname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nickname");
            entity.Property(e => e.Percentage)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("percentage");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.SubmittedAt)
                .HasColumnType("datetime")
                .HasColumnName("submitted_at");
            entity.Property(e => e.TotalQuestions).HasColumnName("total_questions");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
        });

        modelBuilder.Entity<SharedQuizSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__shared_q__3213E83F18B66C77");

            entity.ToTable("shared_quiz_sessions");

            entity.HasIndex(e => e.ShareCode, "UQ__shared_q__1888435F803A42A4").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(true)
                .HasColumnName("active_flag");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.GeneratedBy).HasColumnName("generated_by");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.ShareCode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("share_code");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__users__3213E83F89193A91");

            entity.ToTable("users");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(false)
                .HasColumnName("active_flag");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("firstname");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("lastname");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .HasColumnName("mobile");
            entity.Property(e => e.Password)
                .HasMaxLength(500)
                .HasColumnName("password");
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("role");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
        });

        modelBuilder.Entity<UserQuizeReponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserQuiz__3213E83F327B59A1");

            entity.ToTable("UserQuizeReponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Question).HasColumnName("question");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.TotalTimeTaken).HasColumnName("total_time_taken");
            entity.Property(e => e.UserAnswer).HasColumnName("user_answer");
        });

        modelBuilder.Entity<UserRequestPreference>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_req__3213E83FF7B7C623");

            entity.ToTable("user_request_preference");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveFlag)
                .HasDefaultValue(false)
                .HasColumnName("active_flag");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.DifficultyTypeId).HasColumnName("difficulty_type_id");
            entity.Property(e => e.LanguageId).HasColumnName("language_id");
            entity.Property(e => e.NumberOfQuestions).HasColumnName("number_of_questions");
            entity.Property(e => e.QuestionsTypeId).HasColumnName("questions_type_id");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Request).WithMany(p => p.UserRequestPreferences)
                .HasForeignKey(d => d.RequestId)
                .HasConstraintName("FK__user_requ__reque__5070F446");

            entity.HasOne(d => d.User).WithMany(p => p.UserRequestPreferences)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__user_requ__user___4F7CD00D");
        });

        modelBuilder.Entity<UserRequestResponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__user_req__3213E83FCCFA8957");

            entity.ToTable("user_request_response");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FlashcardJson).HasColumnName("flashcard_json");
            entity.Property(e => e.QuestionJson).HasColumnName("question_json");
            entity.Property(e => e.RecommendationsJson).HasColumnName("recommendations_json");
            entity.Property(e => e.RequestId).HasColumnName("request_id");
            entity.Property(e => e.SummaryJson).HasColumnName("summary_json");
            entity.Property(e => e.Title).HasColumnName("title");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}